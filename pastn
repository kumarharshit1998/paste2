using System;
using System.Net;
using System.ServiceModel;
using System.ServiceModel.Channels;
using System.Text;
using System.Threading.Tasks;
using LossMitigationMVC.CDSService; // Namespace from the WSDL

namespace LossMitigationMVC.Repositories
{
    public class PEGARepository
    {
        private readonly string _clientId = "yourClientID";
        private readonly string _clientSecret = "yourClientSecret";

        public async Task<string> GetFCSaleDateAsync(string accountNumber)
        {
            try
            {
                var binding = new BasicHttpBinding(BasicHttpSecurityMode.TransportCredentialOnly)
                {
                    Security =
                    {
                        Transport =
                        {
                            ClientCredentialType = HttpClientCredentialType.Basic
                        }
                    },
                    MaxReceivedMessageSize = 20000000
                };

                var endpoint = new EndpointAddress("https://your-api-endpoint");
                var client = new retrieveCDSAccountPortTypeClient(binding, endpoint);

                client.ClientCredentials.UserName.UserName = "cat"; // dummy
                client.ClientCredentials.UserName.Password = "dog"; // dummy

                var header = new messageHeader
                {
                    documentURN = "12345678910",
                    fromUserID = "LMGWEB"
                };

                var request = new retrieveCDSAccountRequest
                {
                    messageHeader = header,
                    request = new request
                    {
                        accountNumber = accountNumber,
                        locationCode = "100030",
                        cdsIndicator = "Y",
                        cdsIndicatorSpecified = true
                    }
                };

                using (var scope = new OperationContextScope(client.InnerChannel))
                {
                    var httpRequestProperty = new HttpRequestMessageProperty();
                    var authHeader = Convert.ToBase64String(Encoding.ASCII.GetBytes($"{_clientId}:{_clientSecret}"));
                    httpRequestProperty.Headers[HttpRequestHeader.Authorization] = $"Basic {authHeader}";

                    OperationContext.Current.OutgoingMessageProperties[HttpRequestMessageProperty.Name] = httpRequestProperty;

                    var response = await client.retrieveCDSAccountAsync(request);

                    var cds = response.response.customDataSegments;
                    var fcData = cds?.cds_acct_fc3;

                    if (fcData == null || fcData.Length == 0)
                        return "Non-CACS";

                    var saleDate = fcData[0].saleDate8613;
                    if (string.IsNullOrWhiteSpace(saleDate) || saleDate == "'")
                        return "No Date";

                    return DateTime.TryParse(saleDate.Substring(0, 10), out DateTime parsedDate)
                        ? parsedDate.ToString("MM/dd/yyyy")
                        : "Invalid Date";
                }
            }
            catch (Exception ex)
            {
                if (ex.Message.Contains("Data Not Found"))
                    return "Non-CACS";

                // Log ex.Message if needed
                return "Error!";
            }
        }
    }
}
