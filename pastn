CREATE PROCEDURE GetCustomerByLMDBID
    @LMDBID VARCHAR(20)
AS
BEGIN
    SELECT * 
    FROM [D_LOSSMIT].[dbo].[T_LMG_CUSTOMER]
    WHERE LMDB_ID = @LMDBID
END




public class JavaServiceRepository
{
    private readonly ApplicationDbContext _db;
    private readonly HttpClient _httpClient;

    public JavaServiceRepository(ApplicationDbContext db)
    {
        _db = db;
        _httpClient = new HttpClient();
    }

    public async Task<bool> SendJsonAndDownloadFile(string lmdbId)
    {
        try
        {
            // Use ADO.NET from DbContext
            using (var connection = _db.Database.GetDbConnection())
            {
                await connection.OpenAsync();

                using (var command = connection.CreateCommand())
                {
                    command.CommandText = "GetCustomerByLMDBID";
                    command.CommandType = CommandType.StoredProcedure;

                    var param = command.CreateParameter();
                    param.ParameterName = "@LMDBID";
                    param.Value = lmdbId;
                    command.Parameters.Add(param);

                    using (var reader = await command.ExecuteReaderAsync())
                    {
                        if (await reader.ReadAsync())
                        {
                            // Create the JSON data from DB values
                            var jsonData = new
                            {
                                template = "TPAPPRVL_LMDBApprovalLetter",
                                ClientName = reader["Client_Name"].ToString(),
                                ClientAddress1 = reader["Client_Address1"].ToString(),
                                ClientAddress2 = reader["Client_Address2"].ToString(),
                                ClientCity = reader["Client_City"].ToString(),
                                ClientState = reader["Client_State"].ToString(),
                                ClientZipCode = reader["Client_ZipCode"].ToString(),
                                AccountNumber = reader["Account_Number"].ToString(),
                                LMDBID = reader["LMDB_ID"].ToString(),
                                EligibleProduct = reader["Eligible_Product"].ToString()
                            };

                            // Serialize and send
                            string jsonString = JsonSerializer.Serialize(jsonData);
                            var content = new StringContent(jsonString, Encoding.UTF8, "application/json");
                            string javaApiUrl = "http://localhost:8081/pdf/generate";

                            HttpResponseMessage response = await _httpClient.PostAsync(javaApiUrl, content);

                            if (response.IsSuccessStatusCode)
                            {
                                byte[] fileBytes = await response.Content.ReadAsByteArrayAsync();
                                string folderPath = @"C:\apps";
                                Directory.CreateDirectory(folderPath);

                                string filePath = Path.Combine(folderPath, $"GeneratedFile_{lmdbId}.pdf");
                                await File.WriteAllBytesAsync(filePath, fileBytes);

                                return true;
                            }
                            else
                            {
                                Console.WriteLine("Error: " + response.StatusCode);
                                return false;
                            }
                        }
                        else
                        {
                            Console.WriteLine("No data found for LMDB_ID: " + lmdbId);
                            return false;
                        }
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Exception: " + ex.Message);
            return false;
        }
    }
}
